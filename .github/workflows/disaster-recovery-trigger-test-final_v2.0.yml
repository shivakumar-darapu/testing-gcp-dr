name: disaster-recovery-trigger-v1.0

env:

########################### PROJECT DETAILS ################################
  gke_project_id: '${{ vars.gke_project_id }}' 
  namespace: '${{ vars.namespace }}'
############################################################################ 

############################### LOAD BALANCER INFO #########################
  external_lb_url_map: '${{ vars.external_lb_url_map }}'
  internal_lb_url_map: '${{ vars.internal_lb_url_map }}'
############################################################################

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Primary CLUSTER INFO <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


########################### Primary DATABASE INFO ########################## 

  geodb_primary: '${{ vars.geodb_primary }}'
  notifydb_primary: '${{ vars.notifydb_primary }}'
  securitydb_dr_primary: '${{ vars.securitydb_dr_primary }}'
  serviceproviderdb_dr_primary: '${{ vars.serviceproviderdb_dr_primary }}'
  tresurydb_dr_primary: '${{ vars.tresurydb_dr_primary }}'
  workorderdb_dr_primary: '${{ vars.workorderdb_dr_primary }}'
  servicecatalogdb_dr_primary: '${{ vars.servicecatalogdb_dr_primary }}'
  db_region_primary: '${{ vars.db_region_primary }}' # Provide Region name and not zone. Required to create backups

############################################################################ 

########################## Primary BACKEND INFO ###################### 

  primary_external_lb_backend_service_name: '${{ vars.primary_external_lb_backend_service_name }}'
  primary_internal_lb_backend_service_name: '${{ vars.primary_internal_lb_backend_service_name }}'
  
############################################################################

####################### Primary : BACKUP RELATED INFO #######################   

  backup_name_primary: '${{ vars.backup_name_primary }}'
  restore_name_primary: '${{ vars.restore_name_primary }}'
  backup_plan_primary: '${{ vars.backup_plan_primary }}'
  restore_plan_primary: '${{ vars.restore_plan_primary }}'
##############################################################################    

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Secondary CLUSTER INFO <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


########################## Secondary BACKEND INFO ###################### 

  secondary_external_lb_backend_service_name: '${{ vars.secondary_external_lb_backend_service_name }}'
  secondary_internal_lb_backend_service_name: '${{ vars.secondary_internal_lb_backend_service_name }}'

############################################################################ 

########################## Secondary DATABASE INFO ###########################

  geodb_secondary: '${{ vars.geodb_secondary }}'
  notifydb_secondary: '${{ vars.notifydb_secondary }}'
  securitydb_dr_secondary: '${{ vars.securitydb_dr_secondary }}'
  serviceproviderdb_dr_secondary: '${{ vars.serviceproviderdb_dr_secondary }}'
  tresurydb_dr_secondary: '${{ vars.tresurydb_dr_secondary }}'
  workorderdb_dr_secondary: '${{ vars.workorderdb_dr_secondary }}'
  servicecatalogdb_dr_secondary: '${{ vars.servicecatalogdb_dr_secondary }}'
  db_region_secondary: '${{ vars.db_region_secondary }}'

########################################################################### 

####################### Secondary : BACKUP RELATED INFO #######################   

  backup_name_secondary: '${{ vars.backup_name_secondary }}'
  restore_name_secondary: '${{ vars.restore_name_secondary }}'
  backup_plan_secondary: '${{ vars.backup_plan_secondary }}'
  restore_plan_secondary: '${{ vars.restore_plan_secondary }}'
  

##############################################################################  

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>># 

on:
  workflow_dispatch:
    inputs:
      switch_to_region:
        type: choice
        description: Select the region you would like to switch To
        options: 
        - secondary
        - primary
      gke_backup_restore: 
        type: choice
        description: Would you like to create a backup before restore (Selecte False, if you would like to restore from existing backup)
        options:
          - Yes
          - No
      rollback: 
        type: choice
        description: Would you like to rollback ?
        options:
          - No
          - Yes
          
      
 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Rollback_To_SECONDARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    if: inputs.switch_to_region == 'secondary' && inputs.rollback == 'true'
    steps:
      - name: "Cloning the repo to copy the deployments.csv containing the deployment name and replica count"
        uses: actions/checkout@v3
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v0'
        with:
        # Please provide the workload_identity_provider & service_account
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER  }}'
          service_account: '${{ secrets.DR_SERVICE_ACCOUNT } }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: '${{ vars.secondary_cluster_name }}' # Make sure you provide the cluster name and location
          location: '${{ vars.secondary_cluster_location }}'
      - name: 'Use gcloud & kube CLI commands'
        run: |

          echo "-------------> Scaling Out Platform Components <--------------------"
          while IFS=";" read -r dep rep
          do
            if [ -z "$dep" ];then 
              echo ""
            else 
              echo "-----> Increasing replica count to $rep of deployment $dep ----->"
              kubectl scale --replicas=$rep deployment/$dep -n $namespace
            fi
          done < <(cat platform-components-list.csv)

          echo " ----------------> Starting CRON JOBS Pods <-------------------------"
          while IFS=";" read -r job state
          do
            if [ -z "$job" ];then 
              echo ""
            else
              if [ "$state" == "r" ] 
                echo "-----> Stoping the job $job ----->"
                kubectl patch cronjobs $job -p "{\"spec\" : {\"suspend\" : false }}" -n $namespace
              fi
            fi
          done < <(cat cronjobs-list.csv)

          echo "-------------> Restarting Backernd Deployments <-------------------------------------"
          while IFS=";" read -r dep rep
          do
            if [ -z "$dep" ];then 
              echo ""
            else 
              echo "-----> Restating deployment $dep ----->"
              kubectl rollout restart deployment/$dep -n $namespace
            fi
          done < <(cat backend-deployment-list.csv)

          echo "-------------> Restarting Frontend Deployments <-------------------------------------"
          while IFS=";" read -r dep rep
          do
            if [ -z "$dep" ];then 
              echo ""
            else 
              echo "-----> Restating deployment $dep ----->"
              kubectl rollout restart deployment/$dep -n $namespace
            fi
          done < <(cat frontend-deployments-list.csv)

          # Load Balancer Backend Switch 
          gcloud compute url-maps set-default-service --default-service=$secondary_external_lb_backend_service_name $external_lb_url_map --project="$gke_project_id"
          gcloud compute url-maps set-default-service --default-service=$secondary_internal_lb_backend_service_name $internal_lb_url_map --project="$gke_project_id"
        
  Rollback_To_PRIMARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    if: inputs.switch_to_region == 'primary' && inputs.rollback == 'true'
    steps:
      - name: "Clone the repo to copy the deployments.txt"
        uses: actions/checkout@v3
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER  }}'
          service_account: '${{ secrets.DR_SERVICE_ACCOUNT } }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: '${{ vars.primary_cluster_name }}' # Make sure you provide the cluster name and location
          location: '${{ vars.primary_cluster_location }}'
      - name: 'Use gcloud CLI'
        run: |

          echo "-------------> Scaling Out All Platform Components <--------------------"
          while IFS=";" read -r dep rep
          do
            if [ -z "$dep" ];then 
              echo ""
            else 
              echo "-----> Increasing replica count to $rep of deployment $dep ----->"
              kubectl scale --replicas=$rep deployment/$dep -n $namespace
            fi
          done < <(cat platform-components-list.csv)

          echo " ----------------> Starting CRON JOBS Pods <-------------------------"
          while IFS=";" read -r job state
          do
            if [ -z "$job" ];then 
              echo ""
            else
              if [ "$state" == "r" ] 
                echo "-----> Stoping the job $job ----->"
                kubectl patch cronjobs $job -p "{\"spec\" : {\"suspend\" : false }}" -n $namespace
              fi
            fi
          done < <(cat cronjobs-list.csv)
          
          echo "-------------> Restarting Backernd Deployments <-------------------------------------"
          while IFS=";" read -r dep rep
          do
            if [ -z "$dep" ];then 
              echo ""
            else 
              echo "-----> Restating deployment $dep ----->"
              kubectl rollout restart deployment/$dep -n $namespace
            fi
          done < <(cat backend-deployment-list.csv)

          echo "-------------> Restarting Frontend Deployments <-------------------------------------"
          while IFS=";" read -r dep rep
          do
            if [ -z "$dep" ];then 
              echo ""
            else 
              echo "-----> Restating deployment $dep ----->"
              kubectl rollout restart deployment/$dep -n $namespace
            fi
          done < <(cat frontend-deployments-list.csv)
          # Load Balancer Switch
          gcloud compute url-maps set-default-service --default-service=$primary_external_lb_backend_service_name $external_lb_url_map --project="$gke_project_id"
          gcloud compute url-maps set-default-service --default-service=$primary_internal_lb_backend_service_name $internal_lb_url_map --project="$gke_project_id"

  GKE_BACKUP_RESTORE_PRIMARY_TO_SECONDARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    if: inputs.switch_to_region == 'secondary' && inputs.rollback == 'false'
    steps:
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER  }}'
          service_account: '${{ secrets.DR_SERVICE_ACCOUNT } }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: 'Use gcloud CLI'
        run: |

          gcloud components install beta
          echo "================================> Beta component installed ========================================>"
          # Create backup and restore manually

          dt=$(date +%m-%d-%y)
          backup_name_primary="$backup_name_primary-$RANDOM-$dt"
          restore_name_primary="$restore_name_primary-$RANDOM-$dt"
          if [ ${{ github.event.inputs.gke_backup_restore }} == "true" ]
          then 
            # Create backup 
            echo " Creating Backup : $backup_name_primary"
            gcloud beta container backup-restore backups create $backup_name_primary \
                --project=$gke_project_id \
                --location=$db_region_secondary  \
                --backup-plan=$backup_plan_primary \
                --wait-for-completion
            # Restore Backup
            echo " Restoring Backup : $restore_name_primary"
            gcloud beta container backup-restore restores create $restore_name_primary \
              --project=$gke_project_id \
              --location=$db_region_secondary  \
              --restore-plan=$restore_plan_secondary \
              --backup="projects/$gke_project_id/locations/$db_region_secondary/backupPlans/$backup_plan_primary/backups/$backup_name_primary" \
              --wait-for-completion
          else 
            # Only Restore logic 

            # Restore Backup 
            backup_name_primary=$(gcloud beta container backup-restore backups list --backup-plan=$backup_plan_primary --project=$gke_project_id --location=$db_region_secondary --sort-by='~' | awk 'NR==2 {print $1}')
            echo "The latest backup is : $backup_name_primary"
            echo " Restoring Backup : $restore_name_primary"
            gcloud beta container backup-restore restores create $restore_name_primary \
              --project=$gke_project_id \
              --location=$db_region_secondary  \
              --restore-plan=$restore_plan_secondary \
              --backup=projects/$gke_project_id/locations/$db_region_secondary/backupPlans/$backup_plan_primary/backups/$backup_name_primary \
              --wait-for-completion
          fi

  GKE_BACKUP_RESTORE_SECONDARY_TO_PRIMARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    if: inputs.switch_to_region == 'primary' && inputs.rollback == 'false'
    steps:
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER  }}'
          service_account: '${{ secrets.DR_SERVICE_ACCOUNT } }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: 'Use gcloud CLI'
        run: |

          gcloud components install beta
          echo "================================> Beta Component Installed ========================================>"
          # create backup and restore 
          dt=$(date +%m-%d-%y)
          backup_name_secondary="$backup_name_secondary-$RANDOM-$dt"
          restore_name_secondary="$restore_name_secondary-$RANDOM-$dt"
          if [ ${{ github.event.inputs.gke_backup_restore }} == "true" ]
          then 
            # Create backup 

            gcloud beta container backup-restore backups create $backup_name_secondary \
              --project=$gke_project_id \
              --location=$db_region_primary \
              --backup-plan=$backup_plan_secondary \
              --wait-for-completion
            # Restore Backup
            gcloud beta container backup-restore restores create $restore_name_secondary \
              --project=$gke_project_id \
              --location=$db_region_primary \
              --restore-plan=$restore_plan_primary \
              --backup="projects/$gke_project_id/locations/$db_region_primary/backupPlans/$backup_plan_secondary/backups/$backup_name_secondary" \
              --wait-for-completion
          else 
            # Only Restore logic 

            # Restore Backup 
            backup_name_primary=$(gcloud beta container backup-restore backups list --backup-plan=$backup_plan_primary_to_primary --project=$gke_project_id --location=$db_region_primary --sort-by='~' | awk 'NR==2 {print $1}')
            # backup_name_secondary=$(gcloud beta container backup-restore backups list --backup-plan=$backup_plan_primary_to_primary --project=$gke_project_id --location=$db_region_primary --sort-by='~' | awk 'NR==2,/NAME: /{print $1}') 
            echo "The latest backup file name as per search history is : $backup_name_secondary"
            gcloud beta container backup-restore restores create $restore_name_secondary \
              --project=$gke_project_id \
              --location=$db_region_primary \
              --restore-plan=$restore_plan_primary \
              --backup="projects/$gke_project_id/locations/$db_region_primary/backupPlans/$backup_plan_secondary/backups/$backup_name_secondary" \
              --wait-for-completion
          fi

# Responsible to scale the ElasticSearch and RabbitMQ Deployments on current cluster
  SCALE_DOWN_DEPLOYMENTS_ON_SECONDARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs: [GKE_BACKUP_RESTORE_SECONDARY_TO_PRIMARY]
    if: inputs.switch_to_region == 'primary' && inputs.rollback == 'false'
    steps:
      - name: "Cloning the repo to copy the deployments.csv containing the deployment name and replica count"
        uses: actions/checkout@v3
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v1'
        with:
        # Please provide the workload_identity_provider & service_account
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER  }}'
          service_account: '${{ secrets.DR_SERVICE_ACCOUNT } }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: '${{ vars.secondary_cluster_name }}'
          location: '${{ vars.secondary_cluster_location }}' 
      - name: "Scaling Deployemnts on primary cluster"
        run: |

          echo " -----------> Stoping CRON JOBS Pods <-------------"
          while IFS=";" read -r job state
          do
            if [ -z "$job" ];then 
              echo ""
            else
              if [ "$state" == "r" ] 
                echo "-----> Stoping the job $job ----->"
                kubectl patch cronjobs $job -p "{\"spec\" : {\"suspend\" : true }}" -n $namespace
              fi
            fi
          done < <(cat cronjobs-list.csv)

          while IFS=";" read -r dep rep
          do
            if [ -z "$dep" ];then 
              echo ""
            else 
              echo "-----> Decreasing replica count to 0 of deployment $dep ----->"
              kubectl scale --replicas=0 deployment/$dep -n $namespace
            fi
          done < <(cat platform-components-list.csv)
 
 # Responsible to scale the ElasticSearch and RabbitMQ Deployments on current cluster
  SCALE_DOWN_DEPLOYMENTS_ON_PRIMARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs: [GKE_BACKUP_RESTORE_PRIMARY_TO_SECONDARY]
    if: inputs.switch_to_region == 'secondary' && inputs.rollback == 'false'
    steps:
      - name: "Clone the repo to copy the deployments.txt"
        uses: actions/checkout@v3
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v1'
        with:
        # Please provide the workload_identity_provider & service_account
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER  }}'
          service_account: '${{ secrets.DR_SERVICE_ACCOUNT } }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: '${{ vars.primary_cluster_name }}' 
          location: '${{ vars.primary_cluster_location }}'
      - name: "Scaling Deployemnts on primary cluster"
        run: |
          
          echo " -----------> Stoping CRON JOBS Pods <-------------"
          while IFS=";" read -r job state
          do
            if [ -z "$job" ];then 
              echo ""
            else
              if [ "$state" == "r" ] 
                echo "-----> Stoping the job $job ----->"
                kubectl patch cronjobs $job -p "{\"spec\" : {\"suspend\" : true }}" -n $namespace
              fi
            fi
          done < <(cat cronjobs-list.csv)

          while IFS=";" read -r dep rep
          do
            if [ -z "$dep" ];then 
              echo ""
            else 
              echo "-----> Decreasing replica count to 0 of deployment $dep ----->"
              kubectl scale --replicas=0 deployment/$dep -n $namespace
            fi
          done < <(cat platform-components-list.csv)

  DB_PROMOTION_PRIMARY_TO_SECONDARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs: [SCALE_DOWN_DEPLOYMENTS_ON_PRIMARY]
    if: inputs.switch_to_region == 'secondary' && inputs.rollback == 'false'
    steps:
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER  }}'
          service_account: '${{ secrets.DR_SERVICE_ACCOUNT } }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: 'Use gcloud CLI'
        run: |

          if [ "$(gcloud sql instances describe $geodb_secondary --format 'value(instanceType)')" == "READ_REPLICA_INSTANCE" ]; then
          gcloud sql instances promote-replica $geodb_secondary --quiet 
          gcloud sql instances promote-replica $notifydb_secondary --quiet &
          gcloud sql instances promote-replica $securitydb_dr_secondary --quiet &
          gcloud sql instances promote-replica $serviceproviderdb_dr_secondary --quiet &
          gcloud sql instances promote-replica $tresurydb_dr_secondary --quiet &
          gcloud sql instances promote-replica $workorderdb_dr_secondary --quiet &
          gcloud sql instances promote-replica $servicecatalogdb_dr_secondary --quiet
          fi
          
  DB_PROMOTION_SECONDARY_TO_PRIMARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs: [SCALE_DOWN_DEPLOYMENTS_ON_SECONDARY]
    if: inputs.switch_to_region == 'primary' && inputs.rollback == 'false'
    steps:
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER  }}'
          service_account: '${{ secrets.DR_SERVICE_ACCOUNT } }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: 'Use gcloud CLI'
        run: |

          if [ "$(gcloud sql instances describe $geodb_primary --format 'value(instanceType)')" == "READ_REPLICA_INSTANCE" ]; then
          gcloud sql instances promote-replica $geodb_primary --quiet 
          gcloud sql instances promote-replica $notifydb_primary --quiet &
          gcloud sql instances promote-replica $securitydb_dr_primary --quiet &
          gcloud sql instances promote-replica $serviceproviderdb_dr_primary --quiet &
          gcloud sql instances promote-replica $tresurydb_dr_primary --quiet &
          gcloud sql instances promote-replica $workorderdb_dr_primary --quiet &
          gcloud sql instances promote-replica $servicecatalogdb_dr_primary --quiet
          fi

  SCALE_UP_DEPLOYMENTS_SECONDARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    needs: [DB_PROMOTION_PRIMARY_TO_SECONDARY]
    runs-on: ubuntu-latest
    if: inputs.switch_to_region == 'secondary' && inputs.rollback == 'false'
    steps:
      - name: "Cloning the repo to copy the deployments.csv containing the deployment name and replica count"
        uses: actions/checkout@v3
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v0'
        with:
        # Please provide the workload_identity_provider & service_account
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER  }}'
          service_account: '${{ secrets.DR_SERVICE_ACCOUNT } }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: '${{ vars.secondary_cluster_name }}' 
          location: '${{ vars.secondary_cluster_location }}' 
      - name: "Scaling Deployemnts on primary cluster"
        run: |

          echo "-------------> Step1: Scaling Out the Platform components <-------------------------------------"
          while IFS=";" read -r dep rep
          do
            if [ -z "$dep" ];then 
              echo ""
            else 
              echo "-----> Increasing replica count to $rep of deployment $dep ----->"
              kubectl scale --replicas=$rep deployment/$dep -n $namespace
            fi
          done < <(cat platform-deployment-list.csv)
          
          echo "-------------> Step 2 : Verifying if the Platform Components are UP <------------------------------ "
          while IFS=";" read -r dep rep
          do
            if [ -z "$dep" ];then 
              echo ""
            else 
              while true 
              do 
                  if [ "$(kubectl get pods | grep $dep | awk 'NR==1 {print $3}')" == "Running" ];then
                    break
                  fi
                  sleep 5
              done
            fi
          done < <(cat platform-deployment-list.csv)

          echo "-------------> Step3: Scaling Out the Backernd Deployments <----------------------------------------------"
          while IFS=";" read -r dep rep
          do
            if [ -z "$dep" ];then 
              echo ""
            else 
              echo "-----> Increasing replica count to $rep of deployment $dep ----->"
              kubectl scale --replicas=$rep deployment/$dep -n $namespace
            fi
          done < <(cat backend-deployment-list.csv)

          echo "-------------> Step4: Scaling Out the Frontend Deployments <-------------------------------------"
          while IFS=";" read -r dep rep
          do
            if [ -z "$dep" ];then 
              echo ""
            else 
              echo "-----> Increasing replica count to $rep of deployment $dep ----->"
              kubectl scale --replicas=$rep deployment/$dep -n $namespace
            fi
          done < <(cat frontend-deployments-list.csv)

          echo " ----------------> Step5: Starting CRON JOBS Pods <-------------------------"
          while IFS=";" read -r job state
          do
            if [ -z "$job" ];then 
              echo ""
            else
              if [ "$state" == "r" ] 
                echo "-----> Stoping the job $job ----->"
                kubectl patch cronjobs $job -p "{\"spec\" : {\"suspend\" : false }}" -n $namespace
              fi
            fi
          done < <(cat cronjobs-list.csv)
 
  SCALE_UP_DEPLOYMENTS_PRIMARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    needs: [DB_PROMOTION_SECONDARY_TO_PRIMARY]
    runs-on: ubuntu-latest
    if: inputs.switch_to_region == 'primary' && inputs.rollback == 'false'
    steps:
      - name: "Clone the repo to copy the deployments.txt"
        uses: actions/checkout@v3
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER  }}'
          service_account: '${{ secrets.DR_SERVICE_ACCOUNT } }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: '${{ vars.primary_cluster_name }}' 
          location: '${{ vars.primary_cluster_location }}'
      - name: "Scaling Deployemnts on primary cluster"
        run: |

            echo "-------------> Step1: Scaling Out the Platform components <-------------------------------------"
            while IFS=";" read -r dep rep
            do
              if [ -z "$dep" ];then 
                echo ""
              else 
                echo "-----> Increasing replica count to $rep of deployment $dep ----->"
                kubectl scale --replicas=$rep deployment/$dep -n $namespace
              fi
            done < <(cat platform-deployment-list.csv)
            
            echo "-------------> Step 2 : Verifying if the Platform Components are UP <------------------------------ "
            while IFS=";" read -r dep rep
            do
              if [ -z "$dep" ];then 
                echo ""
              else 
                while true 
                do 
                    if [ "$(kubectl get pods | grep $dep | awk 'NR==1 {print $3}')" == "Running" ];then
                      break
                    fi
                    sleep 5
                done
              fi
            done < <(cat platform-deployment-list.csv)

            echo "-------------> Step3: Scaling Out the Backernd Deployments <-------------------------------------"
            while IFS=";" read -r dep rep
            do
              if [ -z "$dep" ];then 
                echo ""
              else 
                echo "-----> Increasing replica count to $rep of deployment $dep ----->"
                kubectl scale --replicas=$rep deployment/$dep -n $namespace
              fi
            done < <(cat backend-deployment-list.csv)

            echo "-------------> Step4: Scaling Out the Frontend Deployments <-------------------------------------"
            while IFS=";" read -r dep rep
            do
              if [ -z "$dep" ];then 
                echo ""
              else 
                echo "-----> Increasing replica count to $rep of deployment $dep ----->"
                kubectl scale --replicas=$rep deployment/$dep -n $namespace
              fi
            done < <(cat frontend-deployments-list.csv)

            echo " ----------------> Step5: Starting CRON JOBS Pods <-------------------------"
            while IFS=";" read -r job state
            do
              if [ -z "$job" ];then 
                echo ""
              else
                if [ "$state" == "r" ] 
                  echo "-----> Stoping the job $job ----->"
                  kubectl patch cronjobs $job -p "{\"spec\" : {\"suspend\" : false }}" -n $namespace
                fi
              fi
            done < <(cat cronjobs-list.csv)

  LB_REBASE_SECONDARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs: [SCALE_UP_DEPLOYMENTS_SECONDARY]
    if: inputs.switch_to_region == 'secondary' && inputs.rollback == 'false'
    steps:
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v0'
        with:
        # Please provide the workload_identity_provider & service_account
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER  }}'
          service_account: '${{ secrets.DR_SERVICE_ACCOUNT } }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: 'Use gcloud CLI'
        run: |

          gcloud compute url-maps set-default-service --default-service=$secondary_external_lb_backend_service_name $external_lb_url_map --project="$gke_project_id"
          gcloud compute url-maps set-default-service --default-service=$secondary_internal_lb_backend_service_name $internal_lb_url_map --project="$gke_project_id"
        
  LB_REBASE_PRIMARY:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs: [SCALE_UP_DEPLOYMENTS_PRIMARY]
    if: inputs.switch_to_region == 'primary' && inputs.rollback == 'false'
    steps:
      - name: Set up gcloud Cloud SDK environment
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER  }}'
          service_account: '${{ secrets.DR_SERVICE_ACCOUNT } }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: 'Use gcloud CLI'
        run: |

          gcloud compute url-maps set-default-service --default-service=$primary_external_lb_backend_service_name $external_lb_url_map --project="$gke_project_id"
          gcloud compute url-maps set-default-service --default-service=$primary_internal_lb_backend_service_name $internal_lb_url_map --project="$gke_project_id"
  

